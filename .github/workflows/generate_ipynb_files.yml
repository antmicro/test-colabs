name: Generate ipynb files
on:
  push:
    branches: [ main ]
    paths:
    - 'philosophers.py'
    - 'hello_world.py'
    - 'micropython.py'
    - 'shell_module.py'
    - 'tensorflow_lite_micro.py'
    - '.github/workflows/generate_ipynb_files.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-18.04
    env:
      GH_SERVICE_ACCOUNT_NAME: "renode-bot"
      GH_SERVICE_ACCOUNT_EMAIL: "renode-bot@antmicro.com"
      GH_SERVICE_ACCOUNT_TOKEN: ${{ secrets.GH_SERVICE_ACCOUNT_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set Up Python
        uses: actions/setup-python@v2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jupytext
          pip install jinja-cli
          sudo apt install -y jq

      - name: Generate py demos
        run: |
          #delete ipynb files to make run a bit faster
          mkdir -p boards/
          rm -rf boards/*
          demos=(philosophers hello_world tensorflow_lite_micro shell_module micropython)
          SCRIPT="cpu0 VectorTableOffset \`sysbus GetSymbolAddress \"_vector_table\"\`"
          for i in "${!demos[@]}"
          do
            wget -P /tmp https://zephyr-dashboard.renode.io/results-"${demos[i]}"_all.json
            board_names=( $(jq -r ' .[] | select(.status | contains("PASSED")) | .board_name' /tmp/results-"${demos[i]}"_all.json))
            board_path=( $(jq -r ' .[] | select(.status | contains("PASSED")) | .board_path' /tmp/results-"${demos[i]}"_all.json))
            uart_names=( $(jq -r ' .[] | select(.status | contains("PASSED")) | .uart_name' /tmp/results-"${demos[i]}"_all.json))
            readarray -t cpus < <(jq -r ' .[] | select(.status | contains("PASSED")) | .cpu' /tmp/results-"${demos[i]}"_all.json)
            for j in "${!board_path[@]}"
            do
                echo "${demos[i]} ${board_names[j]}"
                board_path="boards/${board_names[j]}"
                if echo ${cpus[j]##*-> } | grep -q 'arm/armv.-m' ; then
                  jinja -D zephyr_platform ${board_names[j]} -D board_path ${board_path} -D uart_name ${uart_names[j]} -D script "$SCRIPT" -o "${board_path}"_"${demos[i]}".py "${demos[i]}".py
                else
                  jinja -D zephyr_platform ${board_names[j]} -D board_path ${board_path} -D uart_name ${uart_names[j]} -o "${board_path}"_"${demos[i]}".py "${demos[i]}".py
                fi
            done
          done

      - name: Generate ipynb
        run: |
          cd boards
          find . -type f -exec jupytext --to ipynb {} \;
          cd ..

      - name: Configure git
        run: |
          git config --global user.name $GH_SERVICE_ACCOUNT_NAME
          git config --global user.email $GH_SERVICE_ACCOUNT_EMAIL

      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v3
        with:
          branch: update-ipynb
          base: main
          delete-branch: true
          signoff: true
          committer: RenodeBot <renode-bot@antmicro.com>
          author: RenodeBot <renode-bot@antmicro.com>
          token: ${{ secrets.GH_SERVICE_ACCOUNT_TOKEN }}
          title: Generate ipynb files
          commit-message: Automatic update of ipynb files
          body: "Automatic update of ipynb files"

      # Sleep for a moment to enable automatic PR merging
      - name: Sleep
        if: steps.create-pr.outputs.pull-request-operation == 'created'
        run: sleep 10

      - name: Enable automerge
        if: steps.create-pr.outputs.pull-request-operation == 'created'
        uses: peter-evans/enable-pull-request-automerge@v1
        with:
          token: ${{ secrets.GH_SERVICE_ACCOUNT_TOKEN }}
          merge-method: rebase
          pull-request-number: ${{ steps.create-pr.outputs.pull-request-number }}

